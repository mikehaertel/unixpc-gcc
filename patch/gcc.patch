diff -ru ../dist/gcc-3.3.6/config.sub ./config.sub
--- ../dist/gcc-3.3.6/config.sub	2003-01-30 15:25:36.000000000 -0800
+++ ./config.sub	2022-08-14 09:58:55.889070215 -0700
@@ -349,6 +349,7 @@
 		;;
 	3b1 | 7300 | 7300-att | att-7300 | pc7300 | safari | unixpc)
 		basic_machine=m68000-att
+		os=-sysv
 		;;
 	3b*)
 		basic_machine=we32k-att
diff -ru ../dist/gcc-3.3.6/gcc/collect2.c ./gcc/collect2.c
--- ../dist/gcc-3.3.6/gcc/collect2.c	2003-12-08 11:02:39.000000000 -0800
+++ ./gcc/collect2.c	2022-08-14 09:58:19.321071827 -0700
@@ -1572,7 +1572,7 @@
   if (redir)
     {
       /* Open response file.  */
-      redir_handle = open (redir, O_WRONLY | O_TRUNC | O_CREAT);
+      redir_handle = open (redir, O_WRONLY | O_TRUNC | O_CREAT, 0600);
 
       /* Duplicate the stdout and stderr file handles
 	 so they can be restored later.  */
diff -ru ../dist/gcc-3.3.6/gcc/combine.c ./gcc/combine.c
--- ../dist/gcc-3.3.6/gcc/combine.c	2005-01-18 00:39:05.000000000 -0800
+++ ./gcc/combine.c	2022-09-22 08:52:32.911416756 -0700
@@ -450,11 +450,13 @@
   if (GET_MODE_CLASS (GET_MODE (oldval)) == MODE_INT
       && GET_CODE (newval) == CONST_INT)
     {
+#if 0 /* This is over-enthusiastic on 64-bit hosts (from Alain Knaff) */
       /* Sanity check that we're replacing oldval with a CONST_INT
 	 that is a valid sign-extension for the original mode.  */
       if (INTVAL (newval) != trunc_int_for_mode (INTVAL (newval),
 						 GET_MODE (oldval)))
 	abort ();
+#endif
 
       /* Replacing the operand of a SUBREG or a ZERO_EXTEND with a
 	 CONST_INT is not valid, because after the replacement, the
diff -ru ../dist/gcc-3.3.6/gcc/config/m68k/3b1g.h ./gcc/config/m68k/3b1g.h
--- ../dist/gcc-3.3.6/gcc/config/m68k/3b1g.h	2002-08-29 14:40:13.000000000 -0700
+++ ./gcc/config/m68k/3b1g.h	2022-10-12 08:42:37.089411841 -0700
@@ -37,11 +37,58 @@
 #define ASM_SPEC \
  "%{m68020:-mc68020}%{mc68020:-mc68020}%{!mc68020:%{!m68020:-mc68010}}"
 
+/* we use /lib/libp/lib*  when profiling */
+
+#undef LIB_SPEC
+#define LIB_SPEC "%{p:-L/lib/libp} %{pg:-L/lib/libp} -lc"
+
+/* shared libraries need to use crt0s.o  */
+
+#undef STARTFILE_SPEC
+#define STARTFILE_SPEC \
+  "%{!shlib:%{pg:mcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}}%{shlib:crt0s.o%s shlib.ifile.o%s}"
+
 /* Names to predefine in the preprocessor for this target machine.  */
-#define CPP_PREDEFINES "-Dmc68000 -Dmc68k -Dunix -Dunixpc -Asystem=unix  -Asystem=svr3 -Acpu=m68k -Amachine=m68k"
+#define CPP_PREDEFINES "-Dmc68000 -Dmc68k -Dunix -Dunixpc -Asystem=unix -Asystem=svr2 -Acpu=m68k -Amachine=m68k"
 
-/* This is (not really) BSD, so (but) it wants DBX format.  */
-#define DBX_DEBUGGING_INFO 1
+/* Generate sdb debugging information.  */
+#define SDB_DEBUGGING_INFO 1
+
+/* Output DBX (stabs) debugging information if using -gstabs.  */
+#include "dbxcoff.h"
+
+/* COFF symbols don't start with an underscore.  */
+#undef USER_LABEL_PREFIX
+#define USER_LABEL_PREFIX ""
+
+#define USER_LABEL_PREFIX ""
+#undef LOCAL_LABEL_PREFIX
+#define LOCAL_LABEL_PREFIX "."
+
+#undef REGISTER_PREFIX
+#define REGISTER_PREFIX "%"
+
+#undef REGISTER_PREFIX_MD
+#define REGISTER_PREFIX_MD "%%"
+
+#define ASM_RETURN_CASE_JUMP				\
+  do {							\
+    if (TARGET_5200)					\
+      {							\
+	if (ADDRESS_REG_P (operands[0]))		\
+	  return "jmp %%pc@(2,%0:l)";			\
+	else						\
+	  return "ext%.l %0\n\tjmp %%pc@(2,%0:l)";	\
+      }							\
+    else						\
+      return "jmp %%pc@(2,%0:w)";			\
+  } while (0)
+
+#undef REGISTER_NAMES
+#define REGISTER_NAMES \
+{"%d0", "%d1", "%d2", "%d3", "%d4", "%d5", "%d6", "%d7",	\
+ "%a0", "%a1", "%a2", "%a3", "%a4", "%a5", "%fp", "%sp",	\
+ "%f0", "%f1", "%f2", "%f3", "%f4", "%f5", "%f6", "%f7"}
 
 /* Specify how to pad function arguments.
    Value should be `upward', `downward' or `none'.
@@ -56,6 +99,33 @@
 /* Every structure or union's size must be a multiple of 2 bytes.  */
 #define STRUCTURE_SIZE_BOUNDARY 16
 
+/* Every function parameter must be aligned to a multiple of 2 bytes.*/
+#define PARM_BOUNDARY 16
+  
 /* Generate calls to memcpy, memcmp and memset.  */
 #define TARGET_MEM_FUNCTIONS
+  
+#define INIT_TARGET_OPTABS 					\
+  do								\
+    {								\
+      gedf2_libfunc =						\
+      gtdf2_libfunc =						\
+      ledf2_libfunc =						\
+      ltdf2_libfunc =						\
+      eqdf2_libfunc =						\
+      nedf2_libfunc =						\
+	sub_optab->handlers [(int) DFmode].libfunc;		\
+      gesf2_libfunc =						\
+      gtsf2_libfunc =						\
+      lesf2_libfunc =						\
+      ltsf2_libfunc =						\
+      eqsf2_libfunc =						\
+      nesf2_libfunc =						\
+	sub_optab->handlers [(int) SFmode].libfunc;	        \
+      add_optab->handlers [(int) SFmode].libfunc =		\
+      smul_optab->handlers [(int) SFmode].libfunc =		\
+      sdiv_optab->handlers [(int) SFmode].libfunc =		\
+	NULL_RTX;						\
+    }								\
+  while (0)
 
